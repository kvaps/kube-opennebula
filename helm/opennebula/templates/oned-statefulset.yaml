{{- if .Values.oned.enabled }}
{{- $fullName := include "opennebula.fullname" . -}}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $fullName }}-oned
  labels:
    app: {{ $fullName }}-oned
    {{- if .Values.oned.labels }}
    {{- toYaml .Values.oned.labels | nindent 4 }}
    {{- end }}
  annotations:
    kubectl.kubernetes.io/default-exec-container: oned
    {{- with .Values.oned.annotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}

spec:
  replicas: {{ .Values.oned.replicas }}
  selector:
    matchLabels:
      app: {{ $fullName }}-oned
  serviceName: {{ $fullName }}-oned-servers
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ $fullName }}-oned
        {{- with .Values.oned.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/oned-configmap.yaml") . | sha256sum }}
        {{- with .Values.oned.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ $fullName }}-oned
      containers:
      {{- if and .Values.oned.db.enabled (eq .Values.oned.db.backend "mysql") }}
      - name: mysql
        {{- with .Values.oned.db.extraArgs }}
        args: 
        {{- toYaml . | nindent 8 }}
        {{- end }}
        image: {{ .Values.oned.db.image.repository }}:{{ .Values.oned.db.image.tag }}
        imagePullPolicy: {{ .Values.oned.db.image.pullPolicy }}
        volumeMounts:
        {{- with .Values.timezone }}
        - name: timezone
          mountPath: /etc/localtime
          readOnly: true
        {{- end }}
        - name: data
          mountPath: /var/lib/mysql
        {{- with .Values.oned.db.extraVolumeMounts }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        env:
        - name: MYSQL_USER
          value: {{ .Values.oned.db.user }}
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: mysqlPassword
              name: {{ $fullName }}-db-keys
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: mysqlRootPassword
              name: {{ $fullName }}-db-keys
        - name: MYSQL_DATABASE
          value: {{ .Values.oned.db.dbName }}
        {{- with .Values.oned.db.extraEnv }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- end }}
      - name: oned
        image: {{ .Values.oned.image.repository }}:{{ .Values.oned.image.tag }}
        imagePullPolicy: {{ .Values.oned.image.pullPolicy }}
        command: [ '/scripts/init.sh' ]
        args: [ '{{ if .Values.oned.debug }}debug{{ else }}start{{ end }}' ]
        ports:
        - name: http
          containerPort: {{ .Values.oned.port }}
        - name: hm-subscriber
          containerPort: {{ .Values.oned.one_hm.subscriberPort }}
        - name: hm-replier
          containerPort: {{ .Values.oned.one_hm.replierPort }}
        - name: monitord
          containerPort: {{ .Values.oned.monitord.port }}
        env:
        {{- with .Values.oned.createCluster }}
        - name: CREATE_CLUSTER
          value: '{{ if eq (printf "%T" .) "bool" }}{{ . | ternary 1 0 }}{{ else }}{{ . }}{{ end }}'
        {{- end }}
        {{- if .Values.hem.enabled }}{{- with .Values.hem.integrated }}
        - name: HEM_INTEGRATED
          value: '{{ if eq (printf "%T" .) "bool" }}{{ . | ternary 1 0 }}{{ else }}{{ . }}{{ end }}'
        {{- end }}{{- end }}
        {{ if ge (int .Values.oned.leaderId) 0 }}
        - name: LEADER_SERVER_ID
          value: '{{ .Values.oned.leaderId }}'
        {{ end }}
        - name: LEADER_SVC_NAME
          value: {{ $fullName }}-oned-leader
        - name: DB_BACKEND
          value: {{ .Values.oned.db.backend }}
        {{- if eq .Values.oned.db.backend "mysql" }}
        - name: DB_SERVER
          value: {{ .Values.oned.db.server }}
        - name: DB_USER
          value: {{ .Values.oned.db.user }}
        - name: DB_PASSWD
          valueFrom:
            secretKeyRef:
              key: mysqlPassword
              name: {{ $fullName }}-db-keys
        - name: DB_NAME
          value: {{ .Values.oned.db.dbName }}
        - name: DB_CONNECTIONS
          value: "{{ .Values.oned.db.connections }}"
        {{- with .Values.oned.extraEnv }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- end }}
        volumeMounts:
        {{- with .Values.timezone }}
        - name: timezone
          mountPath: /etc/localtime
          readOnly: true
        {{- end }}
        - name: config
          mountPath: /config
        - name: config
          mountPath: /etc/one/monitord.conf
          subPath: monitord.conf
        {{- with .Values.oned.authConfig }}
        {{- range $key, $value := . }}
        - name: auth-config
          mountPath: /etc/one/auth/{{ $key }}
          subPath: {{ $key }}
        {{- end }}
        {{- end }}
        {{- if .Values.hem.enabled }}{{- with .Values.hem.integrated }}
        - name: hem-config
          mountPath: /etc/one/onehem-server.conf
          subPath: onehem-server.conf
        {{- end }}{{- end }}
        - name: scripts
          mountPath: /scripts
        - name: one-run
          mountPath: /run/one
        - name: one-keys
          mountPath: /secrets
        - name: ssh-keys
          mountPath: /var/lib/one/.ssh
        - name: shared
          mountPath: /var/lib/one/vms
          subPath: vms
        - name: shared
          mountPath: /var/tmp
          subPath: tmp
        - name: shared
          mountPath: /var/log/one
          subPath: log
        {{- if eq .Values.oned.db.backend "sqlite" }}
        - name: data
          mountPath: /data
        {{- end }}
        {{- with .Values.oned.extraVolumeMounts }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{ if not .Values.oned.debug }}
        readinessProbe:
          exec:
            command:
            - /usr/bin/onezone
            - list
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 15
        {{ end }}
      {{- with .Values.oned.sidecars }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
      terminationGracePeriodSeconds: 30
      {{- if or .Values.oned.affinity .Values.oned.podAntiAffinity }}
      affinity:
        {{- with .Values.oned.affinity }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if eq .Values.oned.podAntiAffinity "hard" }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "{{ .Values.oned.podAntiAffinityTopologyKey }}"
              labelSelector:
                matchLabels:
                  app: {{ $fullName }}-oned
        {{- else if eq .Values.oned.podAntiAffinity "soft" }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                topologyKey: "{{ .Values.oned.podAntiAffinityTopologyKey }}"
                labelSelector:
                  matchLabels:
                    app: {{ $fullName }}-oned
        {{- end }}
      {{- end }}
      {{- with .Values.oned.image.pullSecrets }}
      imagePullSecrets:
      {{- toYaml . | nindent 6 }}
      {{- end }}
      {{- with .Values.oned.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.oned.tolerations }}
      tolerations:
      {{- toYaml . | nindent 6 }}
      {{- end }}
      securityContext:
        fsGroup: 9869
        runAsUser: 9869
      volumes:
      {{- with .Values.timezone }}
      - name: timezone
        hostPath:
          path: /usr/share/zoneinfo/{{ . }}
          type: File
      {{- end }}
      - name: config
        configMap:
          name: {{ $fullName }}-oned
      {{- with .Values.oned.authConfig }}
      - name: auth-config
        secret:
          secretName: {{ $fullName }}-auth-config
      {{- end }}
      {{- if .Values.hem.enabled }}{{- with .Values.hem.integrated }}
      - name: hem-config
        configMap:
          name: {{ $fullName }}-hem
      {{- end }}{{- end }}
      - name: scripts
        configMap:
          name: {{ $fullName }}-scripts
          defaultMode: 0777
      - name: ssh-keys
        secret:
          secretName: {{ $fullName }}-ssh-keys
          defaultMode: 0400
      - name: one-keys
        secret:
          secretName: {{ $fullName }}-one-keys
      - name: one-run
        emptyDir: {}
      - name: data
        {{- if .Values.persistence.data.enabled }}
        persistentVolumeClaim:
          {{- if .Values.persistence.data.existingClaim }}
          claimName: {{ .Values.persistence.data.existingClaim }}
          {{- else }}
          claimName: {{ $fullName }}-data
          {{- end }}
        {{- else }}
        emptyDir: {}
        {{- end }}
      - name: shared
        {{- if .Values.persistence.shared.enabled }}
        persistentVolumeClaim:
          {{- if .Values.persistence.shared.existingClaim }}
          claimName: {{ .Values.persistence.shared.existingClaim }}
          {{- else }}
          claimName: {{ $fullName }}-shared
          {{- end }}
        {{- else }}
        emptyDir: {}
        {{- end }}
      {{- with .Values.oned.extraVolumes }}
      {{- toYaml . | nindent 6 }}
      {{- end }}


  {{- if and .Values.persistence.data.enabled (not .Values.persistence.data.existingClaim) }}
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        app: {{ $fullName }}-data
        {{- if .Values.persistence.data.labels }}
        {{- toYaml .Values.persistence.data.labels | nindent 4 }}
        {{- end }}
      {{- with .Values.persistence.data.annotations  }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.persistence.data.finalizers  }}
      finalizers:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      accessModes:
        {{- range .Values.persistence.data.accessModes }}
        - {{ . | quote }}
        {{- end }}
      storageClassName: {{ .Values.persistence.data.storageClassName }}
      resources:
        requests:
          storage: {{ .Values.persistence.data.size | quote }}
  {{- end -}}
{{- end }}
