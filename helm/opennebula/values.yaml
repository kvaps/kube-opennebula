# Specified timezone should be existing by path
# /usr/share/zoneinfo/<timezone>

timezone:

# ------------------------------------------------------------------------------
# Persistent Volume configuration
# ------------------------------------------------------------------------------

persistence:

  # Volume for OpenNebula Database
  data:
    enabled: false
    accessModes:
    - ReadWriteOnce
    size: 10Gi
    storageClassName: default
    annotations: {}
    finalizers:
    - kubernetes.io/pvc-protection

    # Use existing PVC instead
    existingClaim:

  # OpenNebula Shared volume, used for sharing logs, novnc tokens
  # and as temporary storage for uploading images via Sunstone
  # necessary if you need these features
  shared:
    enabled: false

    accessModes:
    - ReadWriteMany
    size: 10Gi
    storageClassName: default
    annotations: {}
    finalizers:
    - kubernetes.io/pvc-protection

    # Use existing PVC instead
    existingClaim:

# ------------------------------------------------------------------------------
# Main OpenNebula daemon configuration
# ------------------------------------------------------------------------------

oned:
  enabled: true
  labels: {}
  annotations: {}
  podLabels: {}
  podAnnotations: {}
  extraEnv: []
  sidecars: []
  extraVolumes: []
  extraVolumeMounts: []

  replicas: 3

  # Allow to bootsrap new cluster
  createCluster: false

  # Debug settings
  debug: false
  leaderId: -1

  image:
    repository: ghcr.io/kvaps/opennebula
    tag: v5.12.0.4-1
    pullPolicy: IfNotPresent
    pullSecrets:
    - name: regsecret

  nodeSelector: {}
  tolerations: []
  podAntiAffinity: soft
  podAntiAffinityTopologyKey: kubernetes.io/hostname
  affinity: {}

  # Specify passwords for default accounts
  oneadminPasswd:
  serveradminPasswd:
  oneKey:

  # Specify id_rsa private key for ssh connections
  sshKey:

  port: 2633
  service:
    labels: {}
    annotations: {}
    port: 2633

  # Database configuration
  db:
    extraEnv: []
    extraVolumeMounts: []
    enabled: true
    backend: mysql
    server: 127.0.0.1
    port: 3306
    user: oneadmin
    passwd:
    dbName: opennebula
    connections: 50
    rootPasswd:
    extraArgs:
    - --character-set-server=utf8mb4
    - --collation-server=utf8mb4_unicode_ci
    - --skip-log-bin
    #- --max-connections=150
    #- --innodb-buffer-pool-size=8G
    #- --innodb-buffer-pool-instances=16
    image:
      repository: docker.io/library/mysql
      tag: 8.0.19
      pullPolicy: IfNotPresent

  # Specify nodePort for monitord service (30000-32767)
  # port and nodePort should be the same
  monitord:
    port: 32156 # TODO
    service:
      labels: {}
      annotations: {}
      nodePort: 32156 # TODO
    configOverrides: {}
    configAppends: {}

  # Specify nodePort for one_hm service
  one_hm:
    subscriberPort: 2101
    replierPort: 2102
    service:
      labels: {}
      annotations: {}
      subscriberPort: 2101
      replierPort: 2102

  ingress:
    enabled: true
    labels: {}
    annotations: {}
      #kubernetes.io/ingress.class: nginx
      #kubernetes.io/tls-acme: "true"
    hosts:
    - opennebula.example.org
    tls:
    - secretName: opennebula-tls
      hosts:
      - opennebula.example.org

  configOverrides:
    HOSTNAME: localhost #TODO
    LOG:
      SYSTEM: file
      DEBUG_LEVEL: 3
    RAFT_LEADER_HOOK:
      COMMAND: /scripts/vip.sh
      ARGUMENTS: leader
    RAFT_FOLLOWER_HOOK:
      COMMAND: /scripts/vip.sh
      ARGUMENTS: follower
  configAppends: {}

  # configuration from this section will be mapped to /etc/auth for oned
  # you can specify ldap_auth.conf config here for example
  authConfig: {}

# ------------------------------------------------------------------------------
# OpenNebula scheduler configuration
# ------------------------------------------------------------------------------

sched:
  enabled: true
  labels: {}
  annotations: {}
  podLabels: {}
  podAnnotations: {}
  extraEnv: []
  sidecars: []
  extraVolumes: []
  extraVolumeMounts: []

  replicas: 1

  image:
    repository: ghcr.io/kvaps/opennebula
    tag: v5.12.0.4-1
    pullPolicy: IfNotPresent
    pullSecrets:
    - name: regsecret

  nodeSelector: {}
  tolerations: []
  podAntiAffinity: soft
  podAntiAffinityTopologyKey: kubernetes.io/hostname
  affinity: {}

  configOverrides:
    LOG:
      SYSTEM: std
      DEBUG_LEVEL: 3

# ------------------------------------------------------------------------------
# OneHem server configuration
# ------------------------------------------------------------------------------

hem:
  enabled: true

  # If true, the Hem-server be started on same place with oned by the leader-election hook
  # (workaround for https://github.com/OpenNebula/one/issues/4357)
  integrated: true

  labels: {}
  annotations: {}
  podLabels: {}
  podAnnotations: {}
  extraEnv: []
  sidecars: []
  extraVolumes: []
  extraVolumeMounts: []

  replicas: 1

  image:
    repository: ghcr.io/kvaps/opennebula
    tag: v5.12.0.4-1
    pullPolicy: IfNotPresent
    pullSecrets:
    - name: regsecret

  nodeSelector: {}
  tolerations: []
  podAntiAffinity: soft
  podAntiAffinityTopologyKey: kubernetes.io/hostname
  affinity: {}

  configOverrides:
    :debug_level: 3

# ------------------------------------------------------------------------------
# Sunstone server configuration
# ------------------------------------------------------------------------------

sunstone:
  enabled: true
  labels: {}
  annotations: {}
  podLabels: {}
  podAnnotations: {}
  extraEnv: []
  sidecars: []
  extraVolumes: []
  extraVolumeMounts: []

  replicas: 3

  image:
    repository: ghcr.io/kvaps/opennebula-sunstone
    tag: v5.12.0.4-1
    pullPolicy: IfNotPresent
    pullSecrets:
    - name: regsecret

  port: 9869
  service:
    labels: {}
    annotations: {}
    port: 9869

  ingress:
    enabled: true
    labels: {}
    annotations: {}
      #kubernetes.io/ingress.class: nginx
      #nginx.ingress.kubernetes.io/proxy-body-size: 5000m
      #kubernetes.io/tls-acme: "true"
    hosts:
    - opennebula.example.org
    tls:
    - secretName: opennebula-tls
      hosts:
      - opennebula.example.org

  configOverrides:
    :debug_level: 3
    :vnc_client_port: 443/websockify
    :vnc_proxy_support_wss: only

# ------------------------------------------------------------------------------
# NoVNC server configuration
# ------------------------------------------------------------------------------

novnc:
  enabled: true
  labels: {}
  annotations: {}
  podLabels: {}
  podAnnotations: {}
  extraEnv: []
  sidecars: []
  extraVolumes: []
  extraVolumeMounts: []

  replicas: 1

  image:
    repository: ghcr.io/kvaps/opennebula-sunstone
    tag: v5.12.0.4-1
    pullPolicy: IfNotPresent
    pullSecrets:
    - name: regsecret

  nodeSelector: {}
  tolerations: []
  podAntiAffinity: soft
  podAntiAffinityTopologyKey: kubernetes.io/hostname
  affinity: {}


  port: 29876
  service:
    labels: {}
    annotations: {}
    port: 29876

  ingress:
    enabled: true
    labels: {}
    annotations: {}
      #kubernetes.io/ingress.class: nginx
      #kubernetes.io/tls-acme: "true"
    hosts:
    - opennebula.example.org
    tls:
    - secretName: opennebula-tls
      hosts:
      - opennebula.example.org

  configOverrides:
    :debug_level: 3

# ------------------------------------------------------------------------------
# Memcached server configuration
# ------------------------------------------------------------------------------

memcached:
  enabled: true
  labels: {}
  annotations: {}
  podLabels: {}
  podAnnotations: {}
  extraEnv: []
  sidecars: []
  extraVolumes: []
  extraVolumeMounts: []

  replicas: 1

  image:
    repository: docker.io/library/memcached
    tag: 1.5.6-alpine
    pullPolicy: IfNotPresent
    pullSecrets:
    - name: regsecret

  nodeSelector: {}
  tolerations: []
  podAntiAffinity: soft
  podAntiAffinityTopologyKey: kubernetes.io/hostname
  affinity: {}

  port: 11211
  service:
    labels: {}
    annotations: {}
    port: 11211

# ------------------------------------------------------------------------------
# OneGate server configuration
# ------------------------------------------------------------------------------

gate:
  enabled: true
  labels: {}
  annotations: {}
  podLabels: {}
  podAnnotations: {}
  extraEnv: []
  sidecars: []
  extraVolumes: []
  extraVolumeMounts: []

  replicas: 1

  image:
    repository: ghcr.io/kvaps/opennebula-gate
    tag: v5.12.0.4-1
    pullPolicy: IfNotPresent
    pullSecrets:
      - name: regsecret

  nodeSelector: {}
  tolerations: []
  podAntiAffinity: soft
  podAntiAffinityTopologyKey: kubernetes.io/hostname
  affinity: {}

  port: 5030
  service:
    labels: {}
    annotations: {}
    port: 5030

  # OneGate should use different domain unlike sunstone
  ingress:
    enabled: true
    labels: {}
    annotations: {}
      #kubernetes.io/ingress.class: nginx
      #kubernetes.io/tls-acme: "true"
    hosts:
    - opennebula-gate.example.org
    tls:
    - secretName: opennebula-gate-tls
      hosts:
      - opennebula-gate.example.org

  configOverrides:
    :debug_level: 3

# ------------------------------------------------------------------------------
# OneFlow server configuration
# ------------------------------------------------------------------------------

flow:
  enabled: true
  labels: {}
  annotations: {}
  podLabels: {}
  podAnnotations: {}
  extraEnv: []
  sidecars: []
  extraVolumes: []
  extraVolumeMounts: []

  replicas: 1

  image:
    repository: ghcr.io/kvaps/opennebula-flow
    tag: v5.12.0.4-1
    pullPolicy: IfNotPresent
    pullSecrets:
    - name: regsecret

  nodeSelector: {}
  tolerations: []
  podAntiAffinity: soft
  podAntiAffinityTopologyKey: kubernetes.io/hostname
  affinity: {}

  port: 2474
  service:
    labels: {}
    annotations: {}
    port: 2474

  configOverrides:
    :debug_level: 2

# ------------------------------------------------------------------------------
# OpenNebula exporter configuration
# ------------------------------------------------------------------------------

exporter:
  enabled: true
  labels: {}
  annotations: {}
  podLabels: {}
  podAnnotations: {}
  extraEnv: []
  sidecars: []
  extraVolumes: []
  extraVolumeMounts: []

  replicas: 1

  image:
    repository: ghcr.io/kvaps/opennebula-exporter
    tag: v5.12.0.4-1
    pullPolicy: IfNotPresent
    pullSecrets:
      - name: regsecret

  nodeSelector: {}
  tolerations: []
  podAntiAffinity: soft
  podAntiAffinityTopologyKey: kubernetes.io/hostname
  affinity: {}

  port: 9100
  telemetryPath: /metrics
  periodSeconds: 60
  service:
    labels: {}
    annotations: {}
    port: 9100

  serviceMonitor:
    enabled: false
    interval: 30s
    labels: {}
    annotations: {}

# ------------------------------------------------------------------------------
# OpenNebula configuration service
# ------------------------------------------------------------------------------

configurator:
  enabled: true
  labels: {}
  annotations: {}
  podLabels: {}
  podAnnotations: {}
  extraEnv: []
  sidecars: []
  extraVolumes: []
  extraVolumeMounts: []

  # OpenNebula configuration performed using Deployment
  deployment:
    enabled: true
    image:
      repository: ghcr.io/kvaps/opennebula-exporter
      tag: v5.12.0.4
      pullPolicy: IfNotPresent
      pullSecrets:
        - name: regsecret

    nodeSelector: {}
    tolerations: []
    podAntiAffinity: soft
    podAntiAffinityTopologyKey: kubernetes.io/hostname
    affinity: {}

  # Hosts configuration performed using DaemonSet
  daemonSet:
    enabled: true
    image:
      repository: alpine
      tag: 3.12
      pullPolicy: IfNotPresent
      pullSecrets:
        - name: regsecret

    nodeSelector: {}
    tolerations: []
    affinity: {}

  hosts:
  - regex: ".*" # regular expression to match host names
    im_mad: kvm
    vmm_mad: kvm
    template: {}
      #RESERVED_CPU: 100
      #RESERVED_MEM: 2922448
    setupSSHKeys: true
    # extra script to configure the nodes
    # the commands listed here will run on host
    extraScript: |
      set -x
      mkdir -p /var/lib/one/datastores
      # mount -t nfs some:/share/one/100 /var/lib/one/datastores/100
      find /var/lib/one/datastores -maxdepth 1 -exec chown 9869:9869 {} \;

  clusters: []
  #- name: cluster1
  #  template:
  #    PRIORITY: 1000
  #    RESERVED_CPU: 0
  #    RESERVED_RAM: 0

  images: []
  #- name:      "FreeBSD 12"
  #  path:      "https://s3-eu-west-1.amazonaws.com/opennebula-marketplace/freebsd12-5.10.0-1.20191115.qcow2"
  #  user:      "oneadmin"
  #  group:     "oneadmin"
  #  chmod:     "644"
  #  type:      "OS"
  #  datastore: "images"
  #  template:
  #    DEV_PREFIX: vd
  #    FORMAT: raw
  #    LABELS: OS

  datastores: []
  #- name: "images"
  #  chmod: "600"
  #  user: "oneadmin"
  #  group: "oneadmin"
  #  clusters: "default cluster1"
  #  template: |
  #    ALLOW_ORPHANS: "NO"
  #    CLONE_TARGET: "SYSTEM"
  #    DRIVER: "raw"
  #    DS_MAD: "fs"
  #    DS_MIGRATE: "YES"
  #    LN_TARGET: "SYSTEM"
  #    RESTRICTED_DIRS: "/"
  #    SAFE_DIRS: "/var/tmp"
  #    TM_MAD: "fs_lvm"
  #    TYPE: "IMAGE_DS"

  groups: []
  #- name: cloud-users
  #  template:
  #    SUNSTONE:
  #      DEFAULT_VIEW: "advanced"
  #      GROUP_ADMIN_DEFAULT_VIEW: ""
  #      GROUP_ADMIN_VIEWS: "cloud,advanced"
  #      VIEWS: "cloud,advanced"

  hooks: []
  #- name: iso_check_chtype
  #  template:
  #    TYPE: api
  #    COMMAND: iso_check.sh
  #    ARGUMENTS: "chtype $API"
  #    CALL: "one.image.chtype"

  marketplaces: []
  #- name: static
  #  template:
  #    ENDPOINT: "https://marketplace.opennebula.wedos.cloud/metadata/"
  #    MARKET_MAD: "static"

  templates: []
  #- name:     "FreeBSD 12"
  #  user:     "oneadmin"
  #  group:    "oneadmin"
  #  chmod:    "604"
  #  template: 
  #    CONTEXT:
  #      NETWORK: "YES"
  #      PASSWORD_RESET: "NO"
  #      REPORT_READY: "YES"
  #      SSH_PUBLIC_KEY: "$USER[SSH_PUBLIC_KEY]"
  #      TOKEN: "YES"
  #    CPU: "0.5"
  #    DISK:
  #      IMAGE: "FreeBSD 12 [5.10.0-1.20191115]"
  #      IMAGE_UNAME: "oneadmin"
  #      SIZE: "3072"
  #    GRAPHICS:
  #      LISTEN: "0.0.0.0"
  #      RANDOM_PASSWD: "YES"
  #      TYPE: "VNC"
  #    INPUTS_ORDER: ""
  #    LABELS: "Cloud"
  #    LOGO: "images/logos/freebsd.png"
  #    MEMORY: "512"
  #    MEMORY_UNIT_COST: "MB"
  #    NIC_DEFAULT:
  #      MODEL: "virtio"
  #    OS:
  #      ARCH: "x86_64"
  #      BOOT: ""
  #    VCPU: "1"

  vnets: []
  #  name: dev-ip
  #  user: oneadmin
  #  group: oneadmin
  #  chmod: "600"
  #  clusters: "cluster1"
  #  template: |
  #    BRIDGE: "vmbr0v4000"
  #    DNS: "10.28.0.1"
  #    PHYDEV: "bond0"
  #    SECURITY_GROUPS: "0"
  #    VLAN_ID: "4000"
  #    VN_MAD: "802.1Q"
  #  clusters: "default cluster1"
  #  chmod: "604"
  #  user: "oneadmin"
  #  group: "oneadmin"
  #  ars:
  #  - GATEWAY: "172.16.0.1"
  #    IP: "172.16.0.5"
  #    SIZE: "250"
  #    TYPE: "IP4"
  #  - GATEWAY: "172.17.0.1"
  #    IP: "172.17.0.5"
  #    SIZE: "250"
  #    TYPE: "IP4"

  vntemplates: []
  #- name: cloud-private-net
  #  user: oneadmin
  #  group: oneadmin
  #  chmod: "600"
  #  template:
  #    AUTOMATIC_VLAN_ID: "YES"
  #    CLUSTER_IDS: "100"
  #    PHYDEV: "bond0.4"
  #    VN_MAD: "vxlan"
  #    AR:
  #      IP: "192.168.1.1"
  #      SIZE: "254"
  #      TYPE: "IP4"
  #      AR_ID: ""
